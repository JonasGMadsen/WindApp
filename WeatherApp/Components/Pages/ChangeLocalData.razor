@page "/change-local-data"
@inject IWebHostEnvironment WebHostEnvironment
@inject NavigationManager NavigationManager

<div class="container mt-5">
    <div class="card shadow-lg">
        <div class="card-header" style="background-color: #4B0082; color: white;">
            <h3 class="mb-0">Change Local Wind Data</h3>
        </div>
        <div class="card-body">
            <div class="text-center mb-4">
                <label class="btn btn-outline-primary btn-lg">
                    <span class="bi bi-upload me-2"></span> Select Wind Data File
                    <InputFile OnChange="HandleFileSelected" style="display: none;" />
                </label>
            </div>
            <p class="text-center fs-5">
                <span class="@GetStatusClass()">@_statusMessage</span>
            </p>
        </div>
    </div>
</div>

@code {
    private string _statusMessage = string.Empty;

    private async Task HandleFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;

        if (file.ContentType != "application/json" && !file.Name.EndsWith(".json", StringComparison.OrdinalIgnoreCase)) //keeping this check just in case, even tho it was bad alone.
        {
            _statusMessage = "Error. Invalid file type. Please upload a valid JSON file.";
            StateHasChanged();
            return;
        }

        var filePath = Path.Combine(WebHostEnvironment.WebRootPath, "data", "winddata.json");

        try
        {
            await using var stream = file.OpenReadStream(maxAllowedSize: 50 * 1024 * 1024); // 50 MB file limit. Files should at most be around 10-30 MB, this is just in case.
            using var memoryStream = new MemoryStream();
            await stream.CopyToAsync(memoryStream);
            memoryStream.Position = 0;

            if (!IsValidJson(memoryStream))
            {
                _statusMessage = "Error. The file content is not valid JSON.";
                StateHasChanged();
                return;
            }

            memoryStream.Position = 0;
            await using var fileStream = new FileStream(filePath, FileMode.Create);
            await memoryStream.CopyToAsync(fileStream);

            _statusMessage = "Wind data file updated successfully.";
            StateHasChanged();

            await Task.Delay(3000); // a small delay for user feedback
            NavigationManager.NavigateTo("/");
        }
        catch (Exception ex)
        {
            _statusMessage = $"Error updating file: {ex.Message}";
            StateHasChanged();
        }
    }

    private static bool IsValidJson(Stream stream)
    {
        try
        {
            using var reader = new StreamReader(stream, leaveOpen: true);
            var content = reader.ReadToEnd();
            System.Text.Json.JsonDocument.Parse(content);
            return true;
        }
        catch
        {
            return false;
        }
    }

    private string GetStatusClass()
    {
        if (_statusMessage.Contains("successfully"))
            return "text-success fw-bold";
        if (_statusMessage.Contains("Error"))
            return "text-danger fw-bold";
        return "text-secondary";
    }
}